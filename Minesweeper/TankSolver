LinkedList<boolean[]> tankSolutions = new LinkedList<boolean[]>();
    int[][] tank_board = null;
    boolean optimize;
    int BF_LIMIT = 8;
    boolean[][] knownEmpty = new boolean[16][30];
    boolean[][] allFlagged = new boolean[16][30];
    public void tankSolver(Board board, Game GAME, Rectangle rect) {
        System.out.println("Stepped into tank solver");
        int[][] onScreen = new int[board.ROWS][board.COLUMNS];
        optimize = false;
        //populateFringe(board);
        LinkedList<Cell> borderCells = new LinkedList<Cell>();
        for(int i = 0; i < board.ROWS; i++) {
            for(int j = 0; j < board.COLUMNS; j++) {
                if(!board.board[i][j].COVERED && !board.board[i][j].FLAGGED) {
                    borderCells.add(board.board[i][j]);
                }
            }
        }

        LinkedList<Cell> allEmpty = new LinkedList<Cell>();
        for(int i = 0; i < board.ROWS; i++) {
            for(int j = 0; j < board.COLUMNS; j++) {
                if(board.board[i][j].COVERED && !board.board[i][j].FLAGGED) {
                    allEmpty.add(board.board[i][j]);
                }
            }
        }

        int nOutside = allEmpty.size() - borderCells.size();
        if(nOutside > BF_LIMIT) {
            optimize = true;
        } else {
            borderCells = allEmpty;
        }

        //Something went wrong
        if(borderCells.size() == 0) {
            System.out.println("Fringe size 0");
            return;
        }

        LinkedList<LinkedList<Cell>> segregated;
        if(!optimize) {
            segregated = new LinkedList<LinkedList<Cell>>();
            segregated.add(borderCells);
        } else {
            segregated = tankSegregate(borderCells, board, onScreen);
        }

        int totalMult = 1;
        boolean success = false;
        double bestProb = 0;
        int bestProbCell = -1;
        int bestS = -1;
        for(int s = 0; s < segregated.size(); s++) {
            //The current state of the board
            for(int i = 0; i < board.ROWS; i++) {
                for(int j = 0; j < board.COLUMNS; j++) {
                    Cell curr = board.board[i][j];
                    if(!curr.COVERED) {
                        onScreen[i][j] = curr.N;
                    } else if(curr.MINE) {
                        onScreen[i][j] = -3;
                    } else if(curr.COVERED){
                        if(curr.FLAGGED) {
                            allFlagged[i][j] = true;
                        }
                        onScreen[i][j] = -1;
                    }
                }
                tank_board = onScreen.clone();
            }

            for(int i = 0; i < board.ROWS; i++) {
                for (int j = 0; j < board.COLUMNS; j++) {
                    if (tank_board[i][j] >= 0) {
                        knownEmpty[i][j] = true;
                    } else {
                        knownEmpty[i][j] = false;
                    }
                }
            }

            tankRecurse(segregated.get(s), 0, board, allFlagged, knownEmpty);

            //Something went wrong
            if(tankSolutions.size() == 0) {
                return;
            }

            for(int i=0; i < segregated.get(s).size(); i++) {
                boolean all_mine = true;
                boolean all_empty = true;
                for(boolean[] sln : tankSolutions) {
                    if(!sln[i]) {
                        all_mine = false;
                    }
                    if(sln[i]) {
                        all_empty = false;
                    }
                }

                Cell q = segregated.get(s).get(i);
                int qi = q.X;
                int qj = q.Y;

                if(all_mine) {
                    clickCell(q, InputEvent.BUTTON3_MASK, GAME, rect);
                }
                if(all_empty) {
                    success = true;
                    clickCell(q, InputEvent.BUTTON1_DOWN_MASK, GAME, rect);
                }
            }
            totalMult *= tankSolutions.size();

            if(success) {
                continue;
            }
            int maxEmpty = -1000;
            int iEmpty = -1;
            for(int i = 0; i < segregated.get(s).size(); i++) {
                int nEmpty = 0;
                for(boolean[] sln : tankSolutions) {
                    if (!sln[i]) {
                        nEmpty++;
                    }
                }
                if (nEmpty > maxEmpty) {
                    maxEmpty = nEmpty;
                    iEmpty = i;
                }
            }

            double probability = (double)maxEmpty / (double)tankSolutions.size();

                if(probability > bestProb) {
                    bestProb = probability;
                    bestProbCell = iEmpty;
                    bestS = s;
                }
            }
            if(BF_LIMIT == 8 && nOutside > 8 && nOutside <= 13) {
                System.out.println("Extending brutefore");
                BF_LIMIT = 13;
                tankSolver(board, GAME, rect);
                BF_LIMIT = 8;
                return;
            }

            if(success) {
                System.out.println("Tank solver succesfully invoked");
                return;
            }

            System.out.println("Tank solver guessing with probability");
            Cell q = segregated.get(bestS).get(bestProbCell);
            clickCell(q, InputEvent.BUTTON3_MASK, GAME, rect);

    }
    
    static LinkedList<LinkedList<Cell>>
    tankSegregate(LinkedList<Cell> borderTiles, Board board, int[][] onScreen){
        System.out.println("Stepped into tank segregate");
        LinkedList<LinkedList<Cell>> allRegions = new LinkedList<LinkedList<Cell>>();
        LinkedList<Cell> covered = new LinkedList<Cell>();

        while(true){

            LinkedList<Cell> queue = new LinkedList<Cell>();
            LinkedList<Cell> finishedRegion = new LinkedList<Cell>();

            // Find a suitable starting point
            for(Cell firstT : borderTiles){
                if(!covered.contains(firstT)){
                    queue.add(firstT);
                    break;
                }
            }

            if(queue.isEmpty())
                break;

            while(!queue.isEmpty()){

                Cell curTile = queue.poll();
                int ci = curTile.X;
                int cj = curTile.Y;

                finishedRegion.add(curTile);
                covered.add(curTile);

                // Find all connecting tiles
                for(Cell tile : borderTiles){
                    int ti = tile.X;
                    int tj = tile.Y;

                    boolean isConnected = false;

                    if(finishedRegion.contains(tile))
                        continue;

                    if(Math.abs(ci-ti)>2 || Math.abs(cj-tj) > 2)
                        isConnected = false;

                    else{
                        // Perform a search on all the tiles
                        tilesearch:
                        for(int i=0; i < board.ROWS; i++){
                            for(int j=0; j < board.COLUMNS; j++){
                                if(onScreen[i][j] > 0){
                                    if(Math.abs(ci-i) <= 1 && Math.abs(cj-j) <= 1 &&
                                            Math.abs(ti-i) <= 1 && Math.abs(tj-j) <= 1){
                                        isConnected = true;
                                        break tilesearch;
                                    }
                                }
                            }
                        }
                    }

                    if(!isConnected) continue;

                    if(!queue.contains(tile))
                        queue.add(tile);

                }
            }

            allRegions.add(finishedRegion);

        }

        return allRegions;

    }

    void tankRecurse(LinkedList<Cell> borderTiles, int k, Board board, boolean[][] knownMine, boolean[][] knownEmpty){
        System.out.println("Stepped into tank recurse");
        // Return if at this point, it's already inconsistent
        int flagCount = 0;
        for (int i = 0; i < board.ROWS; i++) {
            for (int j = 0; j < board.COLUMNS; j++) {
                if (knownMine[i][j]) {
                    flagCount++;
                }

                int num = tank_board[i][j];
                if (num < 0) continue;

                // Total bordering squares
                int surround = 0;
                if ((i == 0 && j == 0) || (i == board.ROWS - 1 && j == board.COLUMNS - 1))
                    surround = 3;
                else if (i == 0 || j == 0 || i == board.ROWS - 1 || j == board.COLUMNS - 1)
                    surround = 5;
                else surround = 8;

                int numFlags = 0;
                int numFree = 0;
                LinkedList<Cell> neighbors = board.getNeighbors(board.board[i][j]);
                for(Cell n : neighbors) {
                    if(n.FLAGGED) numFlags++;
                    else numFree++;
                }

                // Scenario 1: too many mines
                if (numFlags > num) return;

                // Scenario 2: too many empty
                if (surround - numFree < num) return;
            }
        }

        // We have too many flags
        if(flagCount > board.N_MINES)
            return;


        // Solution found!
        if(k == borderTiles.size()){

            // We don't have the exact mine count, so no
            if(!optimize && flagCount < board.N_MINES)
                return;

            boolean[] solution = new boolean[borderTiles.size()];
            for(int i=0; i<borderTiles.size(); i++){
                Cell s = borderTiles.get(i);
                solution[i] = knownMine[s.X][s.Y];
            }
            tankSolutions.add(solution);
            return;
        }

        Cell q = borderTiles.get(k);

        // Recurse two positions: mine and no mine
        knownMine[q.X][q.Y] = true;
        tankRecurse(borderTiles, k+1, board, knownMine, knownEmpty);
        knownMine[q.X][q.Y] = false;

        knownEmpty[q.X][q.Y] = true;
        tankRecurse(borderTiles, k+1, board, knownMine, knownEmpty);
        knownEmpty[q.X][q.Y] = false;

    }
